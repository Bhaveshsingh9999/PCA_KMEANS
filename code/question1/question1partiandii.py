# -*- coding: utf-8 -*-
"""Question1partiandii.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HuxJk9aM4u5x0e28CgX7UR0H515L1a-o
"""

from google.colab import files
uploaded = files.upload()

#!pip install matplotlib --upgrade

import pandas as pd
import numpy as np
from numpy.linalg import eig
import matplotlib.pyplot as plt
import math

def mean():
  sum2=sum1=0
  for i in range(1000):
    sum1+=numm[i][0]
  mean1=sum1/1000
  for i in range(1000):
    sum2+=numm[i][1]
  mean2=sum2/1000
  #print(mean1,mean2)
  for i in range(1000):
    numm[i][0]-=mean1
    numm[i][1]-=mean2
  print(mean1,mean2)

def transpose(matrixa):
  matrixb=np.zeros((2,1000))
  for i in range(2):
    for j in range(1000):
      matrixb[i][j]=matrixa[j][i]
  return matrixb

def matrixmul(matrixa , matrixb , rowsizea, colsizea , colsizeb ):
  matrixc=np.zeros((rowsizea,colsizeb))
  for i in range(rowsizea):
    for j in range(colsizeb):
      for k in range(colsizea):
        matrixc[i][j]+=matrixa[i][k]*matrixb[k][j]
  return matrixc

def plotpca(pjojectedmatrix,title):
  final = pd.DataFrame(pjojectedmatrix,columns=['F1','F2'])
  final.plot(kind = 'scatter',x = 'F1',y = 'F2',color = 'red')
  plt.title('PCA')
  plt.grid()
  plt.xlabel('principal component 1')
  plt.ylabel('principal component 2')
  plt.title(title)
  plt.show()

def pca(numm,title):
  datatranspose=transpose(np.copy(numm))
  covariance=matrixmul(np.copy(datatranspose),np.copy(numm),2,1000,2)
  covariance=covariance/1000
  eigenvalues,eigenvectors=eig(covariance)
  #eigenvalues.sort(reverse=True)
  #eigenvectors.T[[0, 1]] = eigenvectors.T[[1, 0]]
  idx=eigenvalues.argsort()[::-1]
  eigenvalues=eigenvalues[idx]
  eigenvectors=eigenvectors[:,idx]
  sum =0
  for i in eigenvalues:
    sum=sum+i
  for i in range(2):
    print("variance explained by",i+1,"eigen vector is ",eigenvalues[i]*100/sum ,"%" )
  projectedmatrix=matrixmul(np.copy(numm),np.copy(eigenvectors),1000,2,2)
  plotpca(projectedmatrix,title)

#ploting the orignal data set 
col=['F1','F2']
data = pd.read_csv("Dataset.csv",names=col)
numm=data.to_numpy()
data.plot(kind = 'scatter',x = 'F1',y = 'F2',color = 'blue')
plt.title('Orignal Dataset')
plt.grid()  
plt.xlabel('feature 1')
plt.ylabel('feature 2')
plt.axline((0,0),(-0.323516, -0.9462227),color = "red",label = 'principal component 1')
plt.axline((0,0),(-0.9462227, 0.323516),color = "green",label = 'principal component 2')
plt.legend(bbox_to_anchor = (1.05, 1.05))

plt.show()

#doing PCA with centering 
col=['F1','F2']
data = pd.read_csv("Dataset.csv",names=col)
numm=data.to_numpy()
mean()
pca(np.copy(numm),'PCA with centering Dataset')

#doing PCA without centering 
col=['F1','F2']
data = pd.read_csv("Dataset.csv",names=col)
numm=data.to_numpy()
pca(np.copy(numm),'PCA without centering Dataset')