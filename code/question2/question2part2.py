# -*- coding: utf-8 -*-
"""question2part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10AHr9ZdMcZYvz-QG1_rjoJNp8beWjs4F
"""

from google.colab import files
uploaded = files.upload()
import pandas as pd

import numpy as np
import random
import matplotlib.pyplot as plt
col=['F1','F2']
data = pd.read_csv("Dataset.csv",names=col)
numm=data.to_numpy()
mean = data.sample(n = 5).to_numpy()

def mean_initilization(x):
  t={}
  for i in range(x):
    t[i]=np.copy(mean[i])
  return t

def z_initialization(x):
  z=[]
  numm=data.to_numpy()
  dm = mean_initilization(x)
  for i in range(1000):
    l=np.copy(numm[i,:2])
    dist=[]
    for j in range(x):
      val=(np.linalg.norm(l-dm[j]))**2
      dist.append(val)
    z.append(np.argmin(dist))
  
  data['Z']=z

def Pointscount(z):
  count={}
  for i in z:
    if i in count:
      count[i]=count[i]+1
    else:
      count[i]=1
  return count

def k_means(kvalue):
 
  while(True):
    # mean calculation 
    currentmean={}
    for i in  range(1000):
      xi=np.copy(numm[i,:2])
      if numm[i][2] in currentmean:
        currentmean[numm[i][2]]=currentmean[numm[i][2]]+xi
      else:
        currentmean[numm[i][2]]=xi
    count=Pointscount(numm[:,2])
    for i in range(kvalue):
      if(count[i]!=0):
        currentmean[i]=currentmean[i]/count[i]
    
    flag=0

    # reinitialization 
    error=0

    for i in range(1000):
      xi=np.copy(numm[i,:2])
      k=arg=numm[i][2]
      dist = (np.linalg.norm(xi- currentmean[arg]))**2
      error=error+dist
      for j in range(kvalue):
        val = (np.linalg.norm(xi-currentmean[j]))**2
        if(val<dist):
          k=j
          dist=val
      if(k!=arg):
        flag=1
        numm[i][2]=k
    #print(error)
      
    count=Pointscount(numm[:,2])
    if(flag==0):
      return currentmean
      break

def vornoi_plot(new_mean):
  list1=[]
  list2=[]
  Zvalue=[]
  x=-10
  while(x<10):
    y=-10
    while(y<10):
      pt=[]
      pt.append(x)
      pt.append(y)
      pt=np.array(pt)
      dist=100000
      k=-1
      for i in new_mean:
        val = (np.linalg.norm(pt - new_mean[i]))**2
        if(val<dist):
          dist=val
          k=i
      list1.append(pt[0])
      list2.append(pt[1])
      Zvalue.append(k)
      y=y+0.1
    x=x+0.1
  vornoi = pd.DataFrame(list(zip(list1, list2, Zvalue)),columns =['X','Y','Z'])
  plt.scatter( vornoi['X'][(vornoi.Z == 0)],vornoi['Y'][(vornoi.Z == 0)],marker='o',color='green',label='region1')
  plt.scatter( vornoi['X'][(vornoi.Z == 1)],vornoi['Y'][(vornoi.Z == 1)],marker='o',color='darkred',label='region2')
  plt.scatter( vornoi['X'][(vornoi.Z == 2)],vornoi['Y'][(vornoi.Z == 2)],marker='o',color='goldenrod',label='region3')
  plt.scatter( vornoi['X'][(vornoi.Z == 3)],vornoi['Y'][(vornoi.Z == 3)],marker='o',color='darkcyan', label='region4')
  plt.scatter( vornoi['X'][(vornoi.Z == 4)],vornoi['Y'][(vornoi.Z == 4)],marker='o',color='lime', label='region5')



  plt.scatter( final['F1'][(final.Z == 0)],final['F2'][(final.Z == 0)],marker='o',color='red',label='cluster1')
  plt.scatter( final['F1'][(final.Z == 1)],final['F2'][(final.Z == 1)],marker='o',color='blue',label='cluster2')
  plt.scatter( final['F1'][(final.Z == 2)],final['F2'][(final.Z == 2)],marker='o',color='indigo',label='cluster3')
  plt.scatter( final['F1'][(final.Z == 3)],final['F2'][(final.Z == 3)],marker='o',color='black',label='cluster4')
  plt.scatter( final['F1'][(final.Z == 4)],final['F2'][(final.Z == 4)],marker='o',color='darkmagenta',label='cluster5')
  plt.xlabel('Feature 1')
  plt.ylabel('Feature 2')
  plt.legend(bbox_to_anchor = (1.05, 0.6))

z_initialization(2)
numm=data.to_numpy()
new_mean=k_means(2)
for i in new_mean:
  print(i,new_mean[i])
final = pd.DataFrame(numm,columns=['F1','F2','Z'])
vornoi_plot(new_mean)

z_initialization(3)
numm=data.to_numpy()
new_mean=k_means(3)
for i in new_mean:
  print(i,new_mean[i])
final = pd.DataFrame(numm,columns=['F1','F2','Z'])
vornoi_plot(new_mean)

z_initialization(4)
numm=data.to_numpy()
new_mean=k_means(4)
for i in new_mean:
  print(i,new_mean[i])
final = pd.DataFrame(numm,columns=['F1','F2','Z'])
vornoi_plot(new_mean)

z_initialization(5)
numm=data.to_numpy()
new_mean=k_means(5)
for i in new_mean:
  print(i,new_mean[i])
final = pd.DataFrame(numm,columns=['F1','F2','Z'])
vornoi_plot(new_mean)